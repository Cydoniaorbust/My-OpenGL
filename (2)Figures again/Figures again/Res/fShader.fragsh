#version 400 core
out vec4 SumColor;
struct Material {
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};
struct Light {
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
in vec3 FragPos;
in vec3 Normal;
uniform vec3 ViewPos;
uniform Material material;
uniform Light light;
void main() {
	//Ambient
	vec3 ambient = light.ambient * material.ambient;
	
	//Diff
	vec3 Norm = normalize(Normal);
	vec3 LightDir = normalize(light.position - FragPos);
	float diff = max(dot(Norm, LightDir), 0.0);
	vec3 diffuse = light.diffuse * (diff * material.diffuse);
	
	//Specular
	vec3 ViewDir = normalize(ViewPos - FragPos);
	vec3 ReflectDir = reflect(-LightDir, Norm);  
	float spec = pow(max(dot(ViewDir, ReflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * (spec * material.specular);  
	
	vec3 result = ambient + diffuse + specular;
	SumColor = vec4(result, 1.0); 
}